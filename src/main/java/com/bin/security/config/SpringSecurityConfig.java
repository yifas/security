package com.bin.security.config;import com.bin.security.component.AjaxAccessDeniedHandler;import com.bin.security.component.AjaxAuthenticationEntryPoint;import com.bin.security.component.UserDetailsServiceImpl;import com.bin.security.filtter.JwtAuthenticationTokenFilter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;/** * @author Administrator */@Configuration@EnableGlobalMethodSecurity(prePostEnabled = true)public class SpringSecurityConfig extends WebSecurityConfigurerAdapter {    /**     * 未登陆时返回 JSON 格式的数据给前端（否则为 html）     */    @Autowired    private AjaxAuthenticationEntryPoint authenticationEntryPoint;    /**     * 无权访问返回的 JSON 格式数据给前端（否则为 403 html 页面）     */    @Autowired    private AjaxAccessDeniedHandler accessDeniedHandler;    /**     * 自定义user     */    @Autowired    private UserDetailsServiceImpl userDetailsService;    /**     * JWT 拦截器     */    @Autowired    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        // 加入自定义的安全认证        auth.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());    }    /**     * 用于配置HttpSecurity     * @param http     * @throws Exception     */    @Override    protected void configure(HttpSecurity http) throws Exception {        // 登陆后可以访问的接口        final String[] login = {                "/user/test",                "/user/findUserById/{id}",                "/role/"        };        // 用户可以访问的接口        final String[] user = {                "/user/test",                "/order/show"        };        // 管理员可以访问的接口        final String[] admin = {                //管理员可以访问                //"/user/findUserList",                "/review/admin/goods/show"        };        // 去掉 CSRF        http.csrf().disable()                // 使用 JWT，关闭session                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)                .and()                // 定义哪些URL需要被保护、哪些不需要被保护                .authorizeRequests()                .antMatchers("/auth/login").permitAll()                // 登陆后可以访问的接口                .antMatchers(login).authenticated()                // 用户可以访问的接口                .antMatchers(user).hasRole("USER")                // 供应商可以访问的接口               // .antMatchers(supplier).hasRole("SUPPLIER")                // 管理员可以访问的接口                // "/user/findUserList",                .antMatchers(admin).hasRole("ADMIN");        // 记住我        http.rememberMe().rememberMeParameter("remember-me")                .userDetailsService(userDetailsService).tokenValiditySeconds(1000);        // 无权访问 JSON 格式的数据        http.exceptionHandling().accessDeniedHandler(accessDeniedHandler);        // 未登录访问 JSON 数据的格式        http.exceptionHandling().authenticationEntryPoint(authenticationEntryPoint);        // JWT Filter 将过滤器按照一定顺序加入过滤器链        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);    }}